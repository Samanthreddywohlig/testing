pipeline {
    agent any
    environment {
        REPO_NAME = 'production-plan-private1'        // Docker Hub repository name
        IMAGE_NAME = "samanthwohlig/${REPO_NAME}:production-plan-private1-${env.BUILD_NUMBER}"
        DOCKER_API_URL = 'https://hub.docker.com/v2/repositories'
        DOCKER_USERNAME = 'samanthwohlig'
        DOCKER_PASSWORD = 'wohlig@123'
        IMG_VERSION = "${env.BUILD_NUMBER}"  // Define imgVersion or replace it with the appropriate value
        OLD_BUILDS_KEEP = 5  // Number of old builds to keep
        EMAIL_RECIPIENTS = 'your-email@example.com' // Set the recipient email address
    }
    triggers {
        cron('0 2 * * *')  // Schedule to run daily at 2 AM
    }
    stages {
        stage('Checkout and List Files') {
            steps {
                checkout scm
                echo "Listing files in the workspace after checkout..."
                sh 'ls -la'
            }
        }

        stage('Verify Directory') {
            steps {
                echo "Listing files in the directory structure..."
                sh 'ls -la jenkins-script-prod'
                sh 'ls -la jenkins-script-stage'
                sh 'ls -la k8s'
                sh 'pwd'
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }

        stage('Check Docker Hub Repository') {
            steps {
                script {
                    def repoCheckCmd = """
                    curl -s -u ${DOCKER_USERNAME}:${DOCKER_PASSWORD} -o /dev/null -w "%{http_code}" ${DOCKER_API_URL}/${DOCKER_USERNAME}/${REPO_NAME}/
                    """
                    def httpResponseCode = sh(script: repoCheckCmd, returnStdout: true).trim()

                    if (httpResponseCode == '404') {
                        echo "Repository ${REPO_NAME} does not exist. Creating it now."
                        def createRepoCmd = """
                        curl -X POST -u ${DOCKER_USERNAME}:${DOCKER_PASSWORD} ${DOCKER_API_URL} \
                        -H "Content-Type: application/json" \
                        -d '{
                            "name": "${REPO_NAME}",
                            "description": "A private repository for ${REPO_NAME}",
                            "is_public": false
                        }'
                        """
                        sh(script: createRepoCmd)
                    } else if (httpResponseCode == '200') {
                        echo "Repository ${REPO_NAME} already exists."
                    } else {
                        error "Unexpected response from Docker Hub: ${httpResponseCode}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}"
                    sh "docker build -t ${IMAGE_NAME} -f jenkins-script-stage/ip-service.Dockerfile ."
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { params.PushToregistry == 'Yes' }
            }
            steps {
                script {
                    echo "Pushing Docker image: ${IMAGE_NAME}"
                    sh "docker push ${IMAGE_NAME}"
                }
            }
        }

        stage('Delete Local Docker Image') {
            when {
                expression { params.PushToregistry == 'Yes' }
            }
            steps {
                script {
                    echo "Deleting local Docker image: ${IMAGE_NAME}"
                    sh "docker rmi ${IMAGE_NAME}"
                }
            }
        }

        stage('Deploying the App on GKE') {
            steps {
                withCredentials([file(credentialsId: 'jenkins-service-account-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    script {
                        echo "Authenticating with Google Cloud..."
                        sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
                        sh "chmod +x jenkins-script-stage/changeTag.sh"
                        sh "./jenkins-script-stage/changeTag.sh ${IMG_VERSION}"
                        echo "Applying Kubernetes configuration..."
                        sh 'kubectl apply -f jenkins-script-stage/kubectl/ip-service-stage.yaml -n staging'
                        echo "Checking Kubernetes pods status..."
                        sh 'kubectl get pods -n staging'
                    }
                }
            }
        }

        stage('Clean Up Old Builds') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Cleaning up old builds..."
                    def buildsToKeep = sh(script: "curl -s -u ${DOCKER_USERNAME}:${DOCKER_PASSWORD} ${DOCKER_API_URL}/${DOCKER_USERNAME}/${REPO_NAME}/tags?page_size=100", returnStdout: true).trim()
                    def tags = readJSON(text: buildsToKeep).results.collect { it.name }
                    tags.sort().reverse().drop(OLD_BUILDS_KEEP).each { tag ->
                        echo "Deleting old build: ${tag}"
                        sh "curl -s -u ${DOCKER_USERNAME}:${DOCKER_PASSWORD} -X DELETE ${DOCKER_API_URL}/${DOCKER_USERNAME}/${REPO_NAME}/tags/${tag}/"
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline succeeded.'
            mail to: EMAIL_RECIPIENTS,
                 subject: "Jenkins Pipeline Succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} succeeded.\n\nCheck Jenkins for more details."
        }
        failure {
            echo 'Pipeline failed.'
            mail to: EMAIL_RECIPIENTS,
                 subject: "Jenkins Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} failed.\n\nCheck Jenkins for more details."
        }
        always {
            echo 'Pipeline finished.'
        }
    }
}
